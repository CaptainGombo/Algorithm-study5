머쓱이 보다 키큰 사람

class Solution {
public int solution(int[] array, int height) {
    int answer = 0;
    for(int i = 0; i < array.length; i++){
    if(array[i] > height){
    answer ++;
    }
   }
return answer;
    }
}

// for, if 사용
// for이 array 길이만큼 돌며
// if - 각 요소들과 키를 비교 후 height보다 크면 answer를 증가

배열 두배 만들기

class Solution {
    public int[] solution(int[] numbers) {
        int[] answer = {};
            
        for(int i = 0; i< numbers.length; i++){
            numbers[i] *= 2;
            
            answer = numbers;
        }
        
        return answer;
    }
}

// answer를 numbers 길이만큼 초기화
// for 문 : answer[i] numbers[i]*2 쭉 사용

삼각형의 완성조건 (1)

import java.util.Arrays;
class Solution {
public int solution(int[] sides) {
int answer = 0;
Arrays.sort(sides);

return sides[0] + sides[1] > sides[2] ? 1:2;
}
}



// Arrays.sort() 배열을 오름차순을 정렬해준다.

//0번째와 1번째 값의 합이 2번째보다 큰지 비교한다 삼항연산자로

중앙값 구하기

import java.util.Arrays;


class Solution {
    public int solution(int[] array) {
              
        
        Arrays.sort(array);
        
        return array[array.length / 2];
    }
}

//데이터 정렬 후 데이터의 개수가 홀수기 때문에 array,length의 길이를 / 2하면 중간값이 나옴.
//Arrays.sort() -> return에 array[array.length / 2].

짝수는 싫어요

class Solution {
    public int[] solution(int n) {
        int[] answer = {};
        int x = 0; 
        if(n%2 == 0) {            
            answer = new int [n/2];                   
        }else {            
            answer = new int [n/2 + 1];
        }
        
        for(int i= 0; i <= n; i++){
            if(i%2 == 1){
                answer[i/2] = i;  
          }
        }       
        return answer;
    }
}

//answer를 n의 배열로 만들어야해!
// n이 홀 수냐 짝수냐에 따라서 달라야하자나? n이 짝수면 홀수 짝수 나누면 반반되는데 n이 홀 수 면 n본인까지 들어가야 홀 수가 나온다.
//if문 써서 n%2= 0 이면 answer라는 배열을 n/2로 놓고 저게 거짓이 나누면 n/2 +1을 배열로한다.
//for문으로 반복문 돌리기 if를 써서 조건식 추가.

배열의 유사도

class Solution {
public int solution(String[] s1, String[] s2) {
        int answer = 0;
        for (int i = 0; i < s1.length; i++) {
        for(int j = 0; j < s2.length; j++) {
        if (s1[i].equals(s2[j])) {
                answer++;
                 }
            }
         }
    return answer;
    }
}

// equals() 메서드는, 내용물을 비교하는 거다. == 은 결과값을 비교하는거다.
// 이 문제는 이 배열의 원소들을 유사도를 비교하는 것이기 때문에 equals()를 사용하는 것.
// 이중 반복문을 돌려서, 두 배열이 같은지를 비교한다.



